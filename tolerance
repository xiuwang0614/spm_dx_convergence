function [dx] = spm_dx(dfdx,f,t)
dp = spm_dx(dFdpp,dFdp,{t});
t = -3.75
dFdpp(almost 0 double)
dFdp (some 0)

nmax = 512;
if n  <= nmax
  dx    = spm_expm(J);
  dx    = dx(:,1);
% 直接改不行, 直接改nmax，dx会变成NaN&Inf -Inf
else       
   x     = sparse(1,1,1,n + 1,1);
   dx    = expv(1,J,x);
end

function  [w, err, hump] = expv( t, A, v, tol, m )
A=J,v=x=sparse(1,1,1,n+1,1),t=1
default tol = 1.0e-7 and m = 30.
[n,n] = size(A);
# n = 722
anorm = norm(A,'inf');
# anorm =1
mxrej = 10;  btol  = 1.0e-7;
gamma = 0.9; delta = 1.2;
mb    = m; t_out   = abs(t);
nstep = 0; t_new   = 0;
t_now = 0; s_error = 0;
rndoff= anorm*eps;
# 2.2204e-16

k1    = 2; xm = 1/m; normv = norm(v); beta = normv;
#xm=1/30,normv = 1, beta=1.
fact  = (((m+1)/exp(1))^(m+1))*sqrt(2*pi*(m+1));
#fact = 1.9190
t_new = (1/anorm)*((fact*tol)/(4*beta*anorm))^xm;
% t_new = 5.1770e-13
s     = 10^(floor(log10(t_new))-1); t_new = ceil(t_new/s)*s;
sgn   = sign(t); nstep = 0;
w     = v;
hump  = normv;


# all could be computed

while t_now < t_out
    nstep = nstep + 1;
    t_step = min( t_out-t_now,t_new );
    V = zeros(n,m+1);
    H = zeros(m+2,m+2);
    V(:,1) = (1/beta)*w;
    for j = 1:m
        p = A*V(:,j);
        for i = 1:j
            H(i,j) = V(:,i)'*p;
            p = p-H(i,j)*V(:,i);
        end;
        s = norm(p);
        if s < btol,
            k1 = 0;
            mb = j;
            t_step = t_out-t_now;
            break;
        end;
        H(j+1,j) = s;
        V(:,j+1) = (1/s)*p;
    end;
    if k1 ~= 0,
        H(m+2,m+1) = 1;
        avnorm = norm(A*V(:,m+1));
    end;
    ireject = 0;
    while ireject <= mxrej,
        mx = mb + k1;
        F = expm(sgn*t_step*H(1:mx,1:mx));
        if k1 == 0,
            err_loc = btol;
            break;
        else
            phi1 = abs( beta*F(m+1,1) );
            phi2 = abs( beta*F(m+2,1) * avnorm );
            if phi1 > 10*phi2,
                err_loc = phi2;
                xm = 1/m;
            elseif phi1 > phi2,
                err_loc = (phi1*phi2)/(phi1-phi2);
                xm = 1/m;
            else
                err_loc = phi1;
                xm = 1/(m-1);
            end;
        end;
        if err_loc <= delta * t_step*tol,
            break;
            fprintf('err_loc <= delta * t_step*tol');
            % 调整了tol, tol 似乎只与t_step,t_now...有关，决定循环的数量，只要这里别break出去应该就没问题。
            % 这里是必须得break出去吧？？？
            % 不然ireject一定会加到=10....是吧？？
            % 所以tol越大越好？？就肯定会break出去？？？？？
            % 检查一下。
            % 有点问题，见w
        else
            t_step = gamma * t_step * (t_step*tol/err_loc)^xm;
            s = 10^(floor(log10(t_step))-1);
            t_step = ceil(t_step/s) * s;
            if ireject == mxrej,
                error('The requested tolerance is too high.');
            end;
            # 是不是只要这里不报错，tolerance 就ok?
            # 但是他写的这个ireject 似乎永远不可能 == mxrej，在while里
            # shit 是可以的
            ireject = ireject + 1;
        end;
    end;
    mx = mb + max( 0,k1-1 );
    w = V(:,1:mx)*(beta*F(1:mx,1));
       %loop 的目的在这里 w= dx...
       % F =expm(sgn*t_step*H(1:mx,1:mx));
       % 说位置2处的索引超出数组边界（不能超出2）
    beta = norm( w );
    hump = max(hump,beta);
    
    t_now = t_now + t_step;
    t_new = gamma * t_step * (t_step*tol/err_loc)^xm;
    s = 10^(floor(log10(t_new))-1);
    t_new = ceil(t_new/s) * s;
    
    err_loc = max(err_loc,rndoff);
    s_error = s_error + err_loc;
end;
err  = s_error;
hump = hump / normv;

return

















